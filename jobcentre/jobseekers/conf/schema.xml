<?xml version="1.0" encoding="UTF-8" ?>
<schema name="example" version="1.5">
    <fields>

        <field name="_version_" type="long" indexed="true" stored="true"/>
        
        <field name="id" type="int" indexed="true" stored="true" required="true"/>
        <field name="firstName" type="string" indexed="false" stored="true" required="true"/>
        <field name="lastName" type="string" indexed="false" stored="true" required="true"/>
        <field name="confidential" type="boolean" indexed="false" stored="true" required="true"/>
        <field name="blockRecruiters" type="boolean" indexed="true" stored="true" required="true"/>
        <field name="modifiedDate" type="tdate" indexed="true" stored="true" required="true"/>
        <field name="availableOn" type="tdate" indexed="true" stored="true" required="false"/>
        <field name="city" type="string" indexed="false" stored="true" required="false"/>
        <field name="country" type="string" indexed="false" stored="true" required="false"/>
        <field name="province" type="string" indexed="false" stored="true" required="false"/>
        <field name="provinceId" type="int" indexed="true" stored="true" required="false"/>
        <field name="eligibleToWork" type="boolean" indexed="true" stored="true" required="true"/>
        <field name="degreeLevel" type="int" indexed="true" stored="true" required="false"/>
        <field name="positionTypeIds" type="int" indexed="true" stored="true" required="false" multiValued="true"/>
        <field name="memberStatusId" type="int" indexed="true" stored="true" required="true"/>
        <field name="careerLevelId" type="int" indexed="true" stored="true" required="false"/>
        <field name="jobCategoryIds" type="int" indexed="true" stored="true" required="false" multiValued="true"/>
        <field name="postSecondaryInstitutionId" type="int" indexed="true" stored="true" required="false"/>
        
        <dynamicField name="experienceMonthsInDiscipline_*"  type="int" indexed="true" stored="true" />
        <dynamicField name="proficiencyIdInLanguageId_*"  type="int" indexed="true" stored="true" />
        
        <field name="relocations_rpt" type="location_rpt" indexed="true" stored="true" required="false" multiValued="true" />
        
        <field name="resumeText" type="text_resume" indexed="true" stored="true" required="false"/>
        
        <!--
        2013-12-31: it's looking more and more like we need to use many independent fields (e.g. position1, position2, positionN)
        instead of multiValued field (positions) because:
        1) We don't want to give users who list many positions a disadvantage (due to length norm inside field norm), which 
            would penalize longer documents (or more words inside positions list)
        2) We want to give independent index-time boost depending on strength in a particular position or skill, and not a general boost to all skills for a user
        BUT
        What if someone enters the same qualification twice?  Do they get higher ranking?  Conclusion: that's OK.
        -->
        <field name="positions1" type="text_position" indexed="true" stored="true" required="false" multiValued="true"/>
        <field name="positions2" type="text_position" indexed="true" stored="true" required="false" multiValued="true"/>
        <field name="positions3" type="text_position" indexed="true" stored="true" required="false" multiValued="true"/>
        <field name="positions4" type="text_position" indexed="true" stored="true" required="false" multiValued="true"/>
        <field name="skills1" type="text_skill" indexed="true" stored="true" required="false" multiValued="true"/>
        <field name="skills2" type="text_skill" indexed="true" stored="true" required="false" multiValued="true"/>
        <field name="skills3" type="text_skill" indexed="true" stored="true" required="false" multiValued="true"/>
        <field name="skills4" type="text_skill" indexed="true" stored="true" required="false" multiValued="true"/>
        
        <field name="text" type="text_general" indexed="true" stored="false" required="false"/>
        
    </fields>

    <uniqueKey>id</uniqueKey>

    <types>
        <fieldType name="string" class="solr.StrField" sortMissingLast="true" />
        <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>
        <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
        <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
        <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
        <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>
        <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
        <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
        <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
        <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>
        <fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>
        <fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>
        <fieldtype name="binary" class="solr.BinaryField"/>
        <fieldType name="pint" class="solr.IntField"/>
        <fieldType name="plong" class="solr.LongField"/>
        <fieldType name="pfloat" class="solr.FloatField"/>
        <fieldType name="pdouble" class="solr.DoubleField"/>
        <fieldType name="pdate" class="solr.DateField" sortMissingLast="true"/>
        <fieldType name="random" class="solr.RandomSortField" indexed="true" />
        
        <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            </analyzer>
        </fieldType>

        <fieldType name="text_position" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([a-zA-Z])\1+" replacement="$1$1"/>
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.ASCIIFoldingFilterFactory"/>
                <!--<filter class="solr.PorterStemFilterFactory"/>-->
                <filter class="solr.KStemFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([a-zA-Z])\1+" replacement="$1$1"/>
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.ASCIIFoldingFilterFactory"/>
                <!--<filter class="solr.PorterStemFilterFactory"/>-->
                <filter class="solr.KStemFilterFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms_position.txt" ignoreCase="true" expand="true"/>
            </analyzer>
        </fieldType>

        <fieldType name="text_skill" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([a-zA-Z])\1+" replacement="$1$1"/>
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.ASCIIFoldingFilterFactory"/>
                <filter class="solr.KStemFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([a-zA-Z])\1+" replacement="$1$1"/>
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.ASCIIFoldingFilterFactory"/>
                <filter class="solr.KStemFilterFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms_skill.txt" ignoreCase="true" expand="true"/>
            </analyzer>
        </fieldType>

        <fieldType name="text_resume" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([a-zA-Z])\1+" replacement="$1$1"/>
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.ASCIIFoldingFilterFactory"/>
                <filter class="solr.KStemFilterFactory"/><!-- Don't use Porter Stemmer because it kills JVM on large text https://issues.apache.org/jira/browse/LUCENE-3335 -->
            </analyzer>
            <analyzer type="query">
                <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([a-zA-Z])\1+" replacement="$1$1"/>
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.ASCIIFoldingFilterFactory"/>
                <filter class="solr.KStemFilterFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms_resume.txt" ignoreCase="true" expand="true"/>
            </analyzer>
        </fieldType>
        
        <!-- example from here: https://cwiki.apache.org/confluence/display/solr/Spatial+Search -->
        <fieldType name="location_rpt"
            class="solr.SpatialRecursivePrefixTreeFieldType"
            spatialContextFactory="com.spatial4j.core.context.jts.JtsSpatialContextFactory"
            distErrPct="0.025"
            maxDistErr="0.000009"
            units="degrees" />
    </types>

</schema>
